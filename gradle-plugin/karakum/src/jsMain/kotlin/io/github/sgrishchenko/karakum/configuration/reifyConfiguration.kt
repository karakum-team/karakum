package io.github.sgrishchenko.karakum.configuration

import io.github.sgrishchenko.karakum.util.*
import js.array.ReadonlyArray
import js.objects.recordOf
import node.path.path
import node.process.process
import typescript.CompilerOptions

const val defaultDisclaimer = "// Generated by Karakum - do not modify it manually!"

private fun normalizeOption(
    patterns: Many<String>?,
    defaultValue: ReadonlyArray<String> = emptyArray(),
): ReadonlyArray<String> {
    return normalizeOption(patterns) { defaultValue }
}

private fun normalizeOption(
    patterns: Many<String>?,
    defaultValue: () -> ReadonlyArray<String>,
): ReadonlyArray<String> {
    return patterns?.toArray() ?: defaultValue()
}

private fun resolveDefaultInputRoot(inputFileNames: ReadonlyArray<String>): String {
    if (inputFileNames.size == 1) {
        return path.dirname(inputFileNames[0]) + path.posix.sep
    }

    val inputPathChunks = inputFileNames
        .map { it.split(path.posix.sep).toTypedArray() }
        .toTypedArray()

    // TODO: handle non-default relative root (UNC prefix)
    return commonPrefix(sources = inputPathChunks).joinToString(path.posix.sep, postfix = path.posix.sep)
}

suspend fun reifyConfiguration(configuration: PartialConfiguration): Configuration {
    val cwd = toPosix(configuration.cwd ?: process.cwd())

    val input = normalizeOption(configuration.input)

    val ignoreInput = normalizeOption(configuration.ignoreInput)
    val ignoreOutput = normalizeOption(configuration.ignoreOutput)

    val inputFileNames = glob(input, cwd, ignoreInput)

    val absoluteOutput = toAbsolute(configuration.output, cwd)

    var output = absoluteOutput
    var outputFileName: String? = null

    if (output.endsWith(".kt")) {
        output = path.dirname(absoluteOutput)
        outputFileName = absoluteOutput
    }

    val extensions = configuration.extensions
    val loadedExtensions = if (extensions != null) {
        loadExtensionsFromFile(extensions, cwd)
    } else {
        loadExtensionsFromGlobs(ExtensionConfiguration(
            plugins = normalizeOption(configuration.plugins, arrayOf("karakum/plugins/*.js")),
            injections = normalizeOption(configuration.injections, arrayOf("karakum/injections/*.js")),
            annotations = normalizeOption(configuration.annotations, arrayOf("karakum/annotations/*.js")),
            nameResolvers = normalizeOption(configuration.nameResolvers, arrayOf("karakum/nameResolvers/*.js")),
            inheritanceModifiers = normalizeOption(configuration.inheritanceModifiers, arrayOf("karakum/inheritanceModifiers/*.js")),
            varianceModifiers = normalizeOption(configuration.varianceModifiers, arrayOf("karakum/varianceModifiers/*.js")),
        ), cwd)
    }

    @Suppress("UNCHECKED_CAST_TO_EXTERNAL_INTERFACE")
    val compilerOptions = configuration.compilerOptions ?: Any() as CompilerOptions

    return Configuration(
        inputRoots = normalizeOption(configuration.inputRoots) {
            arrayOf(resolveDefaultInputRoot(inputFileNames))
        },
        inputFileNames = inputFileNames,

        input = input,
        output = output,

        outputFileName = outputFileName,

        ignoreInput = ignoreInput,
        ignoreOutput = ignoreOutput,

        libraryName = configuration.libraryName ?: "",
        libraryNameOutputPrefix = configuration.libraryNameOutputPrefix ?: false,

        granularity = configuration.granularity ?: Granularity.file,

        plugins = loadedExtensions.plugins,

        injections = loadedExtensions.injections,

        annotations = loadedExtensions.annotations,

        nameResolvers = loadedExtensions.nameResolvers,

        inheritanceModifiers = loadedExtensions.inheritanceModifiers,

        varianceModifiers = loadedExtensions.varianceModifiers,

        moduleNameMapper = configuration.moduleNameMapper ?: recordOf(),
        packageNameMapper = configuration.packageNameMapper ?: recordOf(),

        importInjector = configuration.importInjector ?: recordOf(),
        importMapper = configuration.importMapper ?: recordOf(),

        namespaceStrategy = configuration.namespaceStrategy ?: recordOf(),

        conflictResolutionStrategy = configuration.conflictResolutionStrategy ?: recordOf(),

        compilerOptions = compilerOptions,

        verbose = configuration.verbose ?: false,
        disclaimer = configuration.disclaimer ?: defaultDisclaimer,
        cwd = cwd,
    )
}
