import path from "node:path";
import process from "node:process";
import {Configuration, PartialConfiguration} from "./configuration.js";
import {commonPrefix} from "../utils/fileName.js";
import {toAbsolute, toPosix} from "../utils/path.js";
import {glob} from "../utils/glob.js";
import {loadExtensionsFromFile, loadExtensionsFromGlobs} from "./loadExtensions.js";

const defaultDisclaimer = "// Generated by Karakum - do not modify it manually!"

function normalizeOption(
    patterns: string | string[] | undefined,
    defaultValue: string[] | (() => string[]) = [],
) {
    return patterns !== undefined
        ? typeof patterns === "string" ? [patterns] : patterns
        : typeof defaultValue === "function"
            ? defaultValue()
            : defaultValue
}

function resolveDefaultInputRoot(inputFileNames: string[]) {
    if (inputFileNames.length === 1) {
        return path.dirname(inputFileNames[0]) + path.posix.sep
    }

    const inputPathChunks = inputFileNames.map(fileName => fileName.split(path.posix.sep))

    // TODO: handle non-default relative root (UNC prefix)
    return commonPrefix(...inputPathChunks).join(path.posix.sep) + path.posix.sep
}

export async function reifyConfiguration(configuration: PartialConfiguration): Promise<Configuration> {
    const cwd = toPosix(configuration.cwd ?? process.cwd())

    const input = normalizeOption(configuration.input)

    const ignoreInput = normalizeOption(configuration.ignoreInput)
    const ignoreOutput = normalizeOption(configuration.ignoreOutput)

    const inputFileNames = await glob(input, {
        cwd,
        ignore: ignoreInput,
    })

    const absoluteOutput = toAbsolute(configuration.output, cwd)

    let output = absoluteOutput
    let outputFileName = undefined

    if (output.endsWith(".kt")) {
        output = path.dirname(absoluteOutput)
        outputFileName = absoluteOutput
    }

    const extensions = configuration.extensions

    const {
        plugins,
        injections,
        annotations,
        nameResolvers,
        inheritanceModifiers,
        varianceModifiers,
    } = extensions !== undefined
        ? await loadExtensionsFromFile(extensions, cwd)
        : await loadExtensionsFromGlobs({
            plugins: normalizeOption(configuration.plugins, ["karakum/plugins/*.js"]),
            injections: normalizeOption(configuration.injections, ["karakum/injections/*.js"]),
            annotations: normalizeOption(configuration.annotations, ["karakum/annotations/*.js"]),
            nameResolvers: normalizeOption(configuration.nameResolvers, ["karakum/nameResolvers/*.js"]),
            inheritanceModifiers: normalizeOption(configuration.inheritanceModifiers, ["karakum/inheritanceModifiers/*.js"]),
            varianceModifiers: normalizeOption(configuration.varianceModifiers, ["karakum/varianceModifiers/*.js"]),
        }, cwd)

    return {
        ...configuration,

        inputRoots: normalizeOption(configuration.inputRoots, () => [
            resolveDefaultInputRoot(inputFileNames)
        ]),
        inputFileNames,

        input,
        output,

        outputFileName,

        ignoreInput,
        ignoreOutput,

        libraryName: configuration.libraryName ?? "",
        libraryNameOutputPrefix: configuration.libraryNameOutputPrefix ?? false,

        granularity: configuration.granularity ?? "file",

        plugins,

        injections,

        annotations,

        nameResolvers,

        inheritanceModifiers,

        varianceModifiers,

        moduleNameMapper: configuration.moduleNameMapper ?? {},
        packageNameMapper: configuration.packageNameMapper ?? {},

        importInjector: configuration.importInjector ?? {},
        importMapper: configuration.importMapper ?? {},

        namespaceStrategy: configuration.namespaceStrategy ?? {},

        conflictResolutionStrategy: configuration.conflictResolutionStrategy ?? {},

        compilerOptions: configuration.compilerOptions ?? {},

        verbose: configuration.verbose ?? false,
        disclaimer: configuration.disclaimer ?? defaultDisclaimer,
        cwd,
    }
}
